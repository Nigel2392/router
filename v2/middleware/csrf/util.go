package csrf

import (
	"crypto/rand"
	"encoding/base64"
	"io"
)

type listCompare[T comparable] []T

func (l listCompare[T]) Contains(item T) bool {
	for _, comp := range l {
		if comp == item {
			return true
		}
	}
	return false
}

// A token is generated by returning tokenLength bytes
// from crypto/rand
func generateToken() []byte {
	bytes := make([]byte, tokenLength)

	if _, err := io.ReadFull(rand.Reader, bytes); err != nil {
		panic(err)
	}

	return bytes
}

func b64encode(data []byte) string {
	return base64.RawURLEncoding.EncodeToString(data)
}

func b64decode(data string) []byte {
	decoded, err := base64.RawURLEncoding.DecodeString(data)
	if err != nil {
		return nil
	}
	return decoded
}
